variables:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: ""
  #DOCKER_AUTH_CONFIG: "{\"credsStore\": \"ecr-login\"}"

image: docker:19.03.5
services:
  - docker:19.03.5-dind

stages:
  - Build
  - Push

# USED ONLY FOR PUSHING OTHERWISE NO NEED
# NEED PIP3 TO INSTALL AWS CLI TO PUSH AND FOR THAT PYTHON
# GRAB THE IMAGE WE IMAGE FROM BUILD STAGE FOR PUSHING
# AWS AUTH TOKEN FOR DOCKER CLI THAT MUST BE ALLOWED IN IAM POLICY*
before_script:
  - apk add --no-cache curl jq python py-pip
  - pip install awscli==1.18.8
  - docker load --input data/image.tar
  - $(aws ecr get-login --no-include-email --region us-east-1)
  - aws --version
  - docker info
  - docker --version

Build:
  stage: Build
  before_script: []
  script:
    - mkdir data/
    - docker build --compress -t proxy .
    - docker save --output data/image.tar proxy
  artifacts:
    name: image
    paths:
      - data/

# IF YOU COMMIT TO MAIN BRANCH
# RETAG THE IMAGE

Push Dev:
  stage: Push
  script:
    - docker tag proxy:latest $ECR_REPO:dev
    - docker push $ECR_REPO:dev

  only:
    - main
# WHEN A CI COMMIT TAG IS BEING PUSHED WHEN A JOB IS PUSHED VIA TAG IT GETS SWITCHED TO RELEASE
Push to Release:
  stage: Push
  script:
    - export TAGGED_ECR_REPO=$ECR_REPO:$(echo $CI_COMMIT_TAG | sed 's/-release//')
    - docker tag proxy:latest $TAGGED_ECR_REPO
    - docker push $TAGGED_ECR_REPO
    - docker tag $TAGGED_ECR_REPO $ECR_REPO:latest
    - docker push $ECR_REPO:latest

  rules:
    - if: "$CI_COMMIT_TAG =~ /^*-release$/"
  when: manual
